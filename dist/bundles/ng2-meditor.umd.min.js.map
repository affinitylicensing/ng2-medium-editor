{
  "version": 3,
  "file": "ng2-meditor.umd.min.js",
  "sources": [
    "ng://ng2-meditor/out/medium-editor.component.ts"
  ],
  "sourcesContent": [
    "import { Component, Input, forwardRef, ElementRef, ViewChild, OnChanges, OnInit, OnDestroy } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as MediumEditor from 'medium-editor';\n@Component({\n    selector: 'medium-editor',\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => MediumEditorComponent),\n        multi: true\n    }],\n    template: `<div #host class=\"{{templateClasses}}\"></div>`\n})\nexport class MediumEditorComponent implements ControlValueAccessor, OnInit, OnDestroy, OnChanges {\n    @Input() options: any;\n    @Input() placeholder: string;\n    @Input() templateClasses: string;\n    el: ElementRef;\n    editor: any;\n    @ViewChild('host') host: any;\n    propagateChange = (_: any) => { };\n\n    constructor(el: ElementRef) {\n        this.el = el;\n\n    }\n\n    ngOnInit() {\n        this.options = (typeof this.options === 'string') ? JSON.parse(this.options)\n            : (typeof this.options === 'object') ? this.options : {};\n        if (this.placeholder && this.placeholder !== '') {\n            Object.assign(this.options, {\n                placeholder: { text: this.placeholder }\n            });\n        }\n        this.editor = new MediumEditor(this.host.nativeElement, this.options);\n        this.editor.subscribe('editableInput', (event: any, editable: any) => {\n            let value = this.editor.elements[0].innerHTML;\n            this.ngOnChanges(value);\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.editor) {\n            this.editor.destroy();\n        }\n    }\n\n    ngOnChanges(changes: any) {\n        this.propagateChange(changes);\n    }\n\n    writeValue(value: any) {\n        if (this.editor) {\n            if (value && value !== '') {\n                this.editor.setContent(value);\n            }\n        }\n    }\n    registerOnChange(fn: any) {\n        this.propagateChange = fn;\n    }\n    registerOnTouched(fn: any) { }\n\n}\n"
  ],
  "names": [
    "MediumEditorComponent",
    "el",
    "this",
    "propagateChange",
    "_",
    "prototype",
    "ngOnInit",
    "_this",
    "options",
    "JSON",
    "parse",
    "placeholder",
    "Object",
    "assign",
    "text",
    "editor",
    "MediumEditor",
    "host",
    "nativeElement",
    "subscribe",
    "event",
    "editable",
    "value",
    "elements",
    "innerHTML",
    "ngOnChanges",
    "ngOnDestroy",
    "destroy",
    "changes",
    "writeValue",
    "setContent",
    "registerOnChange",
    "fn",
    "registerOnTouched",
    "type",
    "Component",
    "args",
    "selector",
    "providers",
    "provide",
    "NG_VALUE_ACCESSOR",
    "useExisting",
    "forwardRef",
    "multi",
    "template",
    "ElementRef",
    "Input",
    "templateClasses",
    "ViewChild"
  ],
  "mappings": "wWAAA,IAAAA,EAAA,WAqBI,SAAJA,EAAgBC,GAFhBC,KAAAC,gBAAsB,SAACC,KAGfF,KAAKD,GAAKA,SAIdD,EAAJK,UAAAC,SAAI,WAAA,IAAJC,EAAAL,KACQA,KAAKM,QAAmC,iBAAjBN,KAAKM,QAAwBC,KAAKC,MAAMR,KAAKM,SACrC,iBAAjBN,KAAKM,QAAwBN,KAAKM,WAC5CN,KAAKS,aAAoC,KAArBT,KAAKS,aACzBC,OAAOC,OAAOX,KAAKM,SACfG,aAAeG,KAAMZ,KAAKS,eAGlCT,KAAKa,OAAS,IAAIC,EAAad,KAAKe,KAAKC,cAAehB,KAAKM,SAC7DN,KAAKa,OAAOI,UAAU,gBAAiB,SAACC,EAAYC,GAChD,IAAIC,EAAQf,EAAKQ,OAAOQ,SAAS,GAAGC,UACpCjB,EAAKkB,YAAYH,MAIzBtB,EAAJK,UAAAqB,YAAI,WACQxB,KAAKa,QACLb,KAAKa,OAAOY,WAIpB3B,EAAJK,UAAAoB,YAAI,SAAYG,GACR1B,KAAKC,gBAAgByB,IAGzB5B,EAAJK,UAAAwB,WAAI,SAAWP,GACHpB,KAAKa,QACDO,GAAmB,KAAVA,GACTpB,KAAKa,OAAOe,WAAWR,IAInCtB,EAAJK,UAAA0B,iBAAI,SAAiBC,GACb9B,KAAKC,gBAAkB6B,GAE3BhC,EAAJK,UAAA4B,kBAAI,SAAkBD,OA7DtB,kBAGAE,KAACC,EAAAA,UAADC,OACIC,SAAU,gBACVC,YACIC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAA1C,IAC9B2C,OAAO,IAEXC,SAAU,wFAVdV,KAAuCW,EAAAA,gCAavCrC,UAAA0B,KAAKY,EAAAA,QACLnC,cAAAuB,KAAKY,EAAAA,QACLC,kBAAAb,KAAKY,EAAAA,QAGL7B,OAAAiB,KAAKc,EAAAA,UAALZ,MAAe"
}
